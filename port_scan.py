import socket, argparse, threading

def port_scan(target_host, target_ports):
    try:
        target_ip=socket.gethostbyname(target_host)
    except socket.herror:
        print(f'[-] Cannot resolve {target_host}: Unkown host')
        return
    
    try:
        target_name=socket.gethostbyaddr(target_ip)
        print(f"[+] Scan Result for: {target_name[0]}")
    except socket.herror:
        print(f"[+] Scan Result for {target_ip}")
        
    socket.setdefaulttimeout(1)
    
    for port in target_ports:
        t=threading.Thread(target=conn_scan, args=(target_host, int(port)))
        t.start()

def conn_scan(target_host, target_port):
    thread_lock = threading.Semaphore()
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn_skt:
        try:
            conn_skt.connect((target_host, target_port))
            conn_skt.send(b"Hello, Just Checking my New Scanner!\n")
            recived_answer = conn_skt.recv(100).decode("utf-8")
            thread_lock.acquire()
            print(f"[+] {target_port}/tcp open")
            print(f"    [>] {recived_answer}")
        except OSError:
            thread_lock.acquire()
            print(f"[-] {target_port}/tcp closed")
        finally:
            thread_lock.release()

if __name__ == "__main__":
    parser=argparse.ArgumentParser(usage="port_scan.py TARGET_HOST -p TARGET_PORTS\nexample:python3 port_scan.py scanme.nmap.org -p 21, 80\nif TARGET_PORTS are not specified it scans for first 1000 ports")
    parser.add_argument("target_host", type=str, help="Target IP adress or Domain name", metavar="TARGET_HOST")
    parser.add_argument("-p", "--port", default="1-1000", type=str, help="Specify target port[s] separated by comma (no spaces)\nIf no ports are speacified it scans first 1000 ports")
    args=parser.parse_args()
    if args.port=="1-1000":
        temp_ports=[]
        for i in range(0, 1000):
            temp_ports.append(i)
            
        port_scan(args.target_host, temp_ports)
    else:
        args.target_ports=args.port.split(',')
        port_scan(args.target_host, args.target_ports)